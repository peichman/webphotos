#!/usr/bin/perl -w
use strict;

# buildgallery -d ~/webphotos ~/photos/D90/{photoset}
use YAML;
use Template;
use Getopt::Long;
use FindBin;
use Cwd;
use File::Slurp;
use File::Spec::Functions qw{catfile};
use File::Basename;
use Imager;
use File::Path qw{make_path};
use JSON;

GetOptions(
    'd=s' => \my $OUTPUT_BASE_DIR,
    'force|f' => \my $FORCE,
);

my $INPUT_DIR = shift || cwd;
my $PHOTOSET_ID = basename($INPUT_DIR);

my $IIIF_BASE_URI = 'https://iiif.echodin.net/';
my $METADATA_FILE = 'dc.yml';
my $SEQUENCE_FILE = 'sequence';
my $IMAGE_DIR_NAME = 'images';
my $MANIFESTS_DIR_NAME = 'manifests';
my @SCALE_FACTORS = ([], [xpixels => 1024], [ypixels => 100]);

my @files = read_file(catfile($INPUT_DIR, $SEQUENCE_FILE), chomp => 1);

my $template = Template->new({
    INCLUDE_PATH => [$FindBin::RealBin],
    ENCODING     => 'utf8',
});

my $json_encoder = JSON->new->utf8->canonical;

my $image_dir = catfile($OUTPUT_BASE_DIR, $IMAGE_DIR_NAME);
make_path($image_dir);
my $manifests_dir = catfile($OUTPUT_BASE_DIR, $MANIFESTS_DIR_NAME);
make_path($manifests_dir);

my $metadata_file = catfile($INPUT_DIR, $METADATA_FILE);
my $metadata = -e $metadata_file ? YAML::LoadFile($metadata_file) : {};

my @images;
for my $i (0 .. @files - 1) {
    my $prev = $i > 0 ? $files[$i - 1] : '';
    my $next = $i < @files - 1 ? $files[$i + 1] : '';

    my $this = $files[$i];
    my $original_file = catfile($INPUT_DIR, $this);
    my $file_id = basename($this, '.JPG');

    my $original = Imager->new(file => $original_file);
    my $orientation = $original->tags(name => 'exif_orientation');

    my @sizes = map {
        my $scaled = scale_image($original, @{ $_ });
        my $iiif_path = catfile($image_dir, "$PHOTOSET_ID:$file_id");
        write_image($scaled, $iiif_path);
    } @SCALE_FACTORS;

    my $info = {
        '@context'  => 'http://iiif.io/api/image/2/context.json',
        '@id'       => $IIIF_BASE_URI . $IMAGE_DIR_NAME . '/' . "$PHOTOSET_ID:$file_id",
        protocol    => 'http://iiif.io/api/image',
        width       => $sizes[0]->{width},
        height      => $sizes[0]->{height},
        profile     => 'http://iiif.io/api/image/2/level0.json',
        sizes       => \@sizes,
        attribution => $metadata->{rights},
    };
    my $json_file = catfile($image_dir, "$PHOTOSET_ID:$file_id", 'info.json');
    write_file($json_file, $json_encoder->encode($info));

    push @images, $info;

    print "$PHOTOSET_ID:$file_id\n";
}

my $manifest_root_uri = $IIIF_BASE_URI . $MANIFESTS_DIR_NAME . '/' . $PHOTOSET_ID;
my $manifest = {
    '@context'  => 'http://iiif.io/api/presentation/2/context.json',
    '@id'       => "$manifest_root_uri/manifest",
    '@type'     => 'sc:Manifest',
    label       => $metadata->{title},
    description => $metadata->{description},
    thumbnail   => thumbnail_info($images[0]),
    attribution => $metadata->{rights},
    metadata    => [
        map { { label => ucfirst, value => $metadata->{$_} } } grep { $metadata->{$_} } qw{title creator coverage date identifier}
    ],
    sequences   => [
        {
            '@id'    => "$manifest_root_uri/sequences/normal",
            '@type'  => 'sc:Sequence',
            label    => 'Original Shot Order',
            canvases => [ map {
                my $image = $images[$_];
                my $n = sprintf('%03d', $_ + 1);
                {
                    '@id'   => "$manifest_root_uri/canvas/$n",
                    '@type' => 'sc:Canvas',
                    label   => $n,
                    width   => $image->{width},
                    height  => $image->{height},
                    images  => [
                        {
                            '@id'      => "$manifest_root_uri/annotation/image-$n",
                            '@type'    => 'oa:Annotation',
                            motivation => 'sc:painting',
                            on         => "$manifest_root_uri/canvas/$n",
                            resource   => {
                                '@id'   => "$manifest_root_uri/res/$n.jpg",
                                '@type' => 'dctypes:Image',
                                format  => 'image/jpeg',
                                width   => $image->{width},
                                height  => $image->{height},
                                service => {
                                    '@context'  => 'http://iiif.io/api/image/2/context.json',
                                    '@id'       => $image->{'@id'},
                                    protocol    => 'http://iiif.io/api/image',
                                    profile     => 'http://iiif.io/api/image/2/level0.json',
                                },
                            },
                        },
                    ],
                    thumbnail => thumbnail_info($image),
                }
            } (0 .. @images - 1) ],
        },
    ],
};

my $manifest_dir = catfile($OUTPUT_BASE_DIR, 'manifests', $PHOTOSET_ID);
make_path($manifest_dir);
write_file(catfile($manifest_dir, 'manifest.json'), $json_encoder->encode($manifest));

sub scale_image {
    my ($original, %factor) = @_;
    my $scaled = %factor ? $original->scale(%factor, qtype => 'mixing') : $original->copy;
    my $orientation = $original->tags(name => 'exif_orientation');
    if ($orientation == 8) {
        $scaled = $scaled->rotate(right => 270);
    } elsif ($orientation == 3) {
        $scaled = $scaled->rotate(right => 180);
    } elsif ($orientation == 6) {
        $scaled = $scaled->rotate(right => 90);
    }
    return $scaled;
}

sub write_image {
    my ($scaled, $iiif_path) = @_;
    my $size = $scaled->getwidth . ',';
    my $dir = catfile($iiif_path, 'full', $size, '0');
    my $scaled_file = catfile($dir, 'default.jpg');
    if ($FORCE || !-e $scaled_file) {
        make_path($dir);
        $scaled->write(file => $scaled_file, type => 'jpeg', jpegquality=>90);
    } else {
        warn "$scaled_file exists, skipping (use --force to overwrite)\n";
    }
    return {
        width  => $scaled->getwidth,
        height => $scaled->getheight,
    };
}

sub thumbnail_info {
    my ($image) = @_;
    my $thumbnail_size = $image->{sizes}[2];
    return {
        '@id'   => sprintf('%s/full/%s,/0/default.jpg', $image->{'@id'}, int($thumbnail_size->{width})),
        width   => $thumbnail_size->{width},
        height  => $thumbnail_size->{height},
        service => {
            '@context' => "http://iiif.io/api/image/2/context.json",
            '@id'      => $image->{'@id'},
            profile    => "http://iiif.io/api/image/2/level0.json"
        },
    };
}
